apiVersion: eksctl.io/v1alpha5
kind: ClusterConfig

metadata:
  name: dev-onebot-eks-cluster-v2
  region: us-east-1
  version: "1.31"
  tags: 
    karpenter.sh/discovery: dev-onebot-eks-cluster-v2

vpc:
  id: vpc-0299477e8eb79eca3
  subnets:
    private:
      us-east-1a: { id: subnet-0b512423dd732bf94 }  
      us-east-1b: { id: subnet-0ba053c1a51c8c442 }
      us-east-1c: { id: subnet-08f38448bb36a92bf }

  publicAccessCIDRs:
    - "49.206.0.20/32"
  clusterEndpoints:
    privateAccess: true  
    publicAccess: true

managedNodeGroups:
  - name: dev-setnext-ng-private
    instanceType: m5.xlarge
    # launch nodegroup in private subnets
    privateNetworking: true
    minSize: 1
    desiredCapacity: 1
    maxSize: 10
    volumeSize: 30
    labels: {zone: secured}
    tags:
      nodegroup-role: worker
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  - name: dev-setnext-ng-monitoring
    instanceType: m5.xlarge
    labels:
      monitoring: "true"
      zone: secured 
    iam:
      attachPolicyARNs:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        - arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    taints:
      - key: "monitoring"
        value: "only"
        effect: "NoSchedule"
    desiredCapacity: 2
    minSize: 2
    maxSize: 5
    privateNetworking: true
    ssh: 
      enableSsm: true
    
addons:
  - name: aws-ebs-csi-driver
    version: latest
  - name: eks-pod-identity-agent
    version: latest

addonsConfig:    
   autoApplyPodIdentityAssociations: true

iam:
  withOIDC: true

